from .Model import Model
from google.cloud import datastore
import os
from datetime import date
import requests as r

KIND = 'TripDocs'
PROJECT = 'cloud-f21-robin-su-robisu'
NYT_KEY = os.environ.get('NYT_KEY')
NYT_BASE_URL = f'https://api.nytimes.com/svc/search/v2/articlesearch.json?api-key={NYT_KEY}'

class model(Model):
    def __init__(self):
        """
        Initialize model object by creating client to interact with Google Datastore
        """
        self.client = datastore.Client(PROJECT)

    def select(self):
        """
        Query for all entities listed under the same KIND
        """
        query_kind = self.client.query(kind=KIND)
        query_iter = query_kind.fetch()
        docs = []
        for item in query_iter:
            entry = dict(title=item['title'], start_date=item['start_date'], end_date=item['end_date'], city=item['city'], state=item['state'], country=item['country'], notes=item['notes'], id=item.key.id)
            docs.append(entry)
    
        return docs
        
    def select_one(self, id):
        """
        Get single entity based on key of the associated object
        :params id: Id is an integer automatically generated by Datastore and uniquely identifies a single entity
        """   
        key =self.client.key(KIND, int(id))
        item = self.client.get(key)
        entry = dict(title=item['title'], start=item['start'], end=item['end'], city=item['city'], state=item['state'], country=item['country'], notes=item['notes'], id=item.key.id)

        return entry
        

    def insert(self, trip_details):
        """
        Enter new entity into Datastore under the specified KIND
        :params: all fields with the associated course review.
        """
        key = self.client.key(KIND)
        trip = datastore.Entity(key)
        trip.update(
            {
                'title': trip_details['title'],
                'start_date': trip_details['start_date'],
                'end_date': trip_details['end_date'],
                'city': trip_details['city'],
                'state': trip_details['state'],
                'country': trip_details['country'],
                'notes': trip_details['notes'],
            }
        )
        self.client.put(trip)

        return True
        

    def update(self, trip_details):
        """
        Update existing entity with user-entered information.
        :params: all updated fields of a single course review to revise existing entity in Datastore
        """
        key = self.client.key(KIND, int(trip_details['id']))
        trip = datastore.Entity(key)
        trip.update(
            {
                'title': trip_details['title'],
                'start_date': trip_details['start_date'],
                'end_date': trip_details['end_date'],
                'city': trip_details['city'],
                'state': trip_details['state'],
                'country': trip_details['country'],
                'notes': trip_details['notes'],
            }
        )
        self.client.put(trip)

        return True
    
    def get_article_data(self, nyt_data):
        nyt_url = f'{NYT_BASE_URL}&q={nyt_data["city"]},{nyt_data["state"]},{nyt_data["country"]}&fq=section_name:("Travel") AND glocations.contains:("{nyt_data["city"]}" "{nyt_data["country"]}")'
        response = r.get(nyt_url)
        response = response.json()
        assert response['status'] == 'OK', f'Received a non "OK" response: {response["status"]}'
        articles_list = [x for x in response['response']['docs']]
        links = []
        
        for a in articles_list:
            item = dict(headline=a['headline']['main'], url=a['web_url'], abstract=a['abstract'])
            pub = date.fromisoformat(a['pub_date'][:10])
            item['pub_date'] = f'{pub.month}/{pub.day}/{pub.year}'
            links.append(item)
        
        return links

        